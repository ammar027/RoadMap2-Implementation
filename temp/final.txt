import React, { useEffect, useState } from 'react';
import {
  SafeAreaView,
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
} from 'react-native';
import { GoogleSignin, GoogleSigninButton } from '@react-native-google-signin/google-signin';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useDispatch, useSelector } from 'react-redux';
import { signIn as signInAction, signOut } from '../src/redux/userdataSlice';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { NativeModules } from 'react-native';

const { LoginModule } = NativeModules;

type GoogleUser = {
  name: string;
  email: string;
  photo: string;
};

const ProfileScreen = () => {
  const [user, setUser] = useState<GoogleUser | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const { isSignedIn, userName, userEmail } = useSelector(state => state.userdata);
  const dispatch = useDispatch();

  useEffect(() => {
    GoogleSignin.configure({
      webClientId: '72666036321-qpf7p03d83iujevsedip3i0u2d2j3mph.apps.googleusercontent.com', // Replace with your actual Web Client ID
      scopes: ['openid', 'profile', 'email'],
    });

    // Load user data from AsyncStorage if available
    const loadUserData = async () => {
      try {
        const savedUser = await AsyncStorage.getItem('user');
        if (savedUser) {
          setUser(JSON.parse(savedUser));
        }
      } catch (e) {
        console.error('Failed to load user data', e);
      }
    };

    loadUserData();
  }, []);

  const handleGoogleLogin = async () => {
    setLoading(true);
    try {
      await GoogleSignin.hasPlayServices();
      const userInfo = await GoogleSignin.signIn();

      console.log('Google Sign-In successful:', userInfo);

      if (userInfo && userInfo.data && userInfo.data.user) {
        const { user } = userInfo.data;

        console.log('User Info:');
        console.table({
          'Name': user.name || 'No name available',
          'Email': user.email || 'No email available',
          'Photo URL': user.photo || 'https://via.placeholder.com/120',
        });

        setUser({
          name: user.name || 'No name available',
          email: user.email || 'No email available',
          photo: user.photo || 'https://via.placeholder.com/120',
        });

        // Save user data to AsyncStorage
        await AsyncStorage.setItem('user', JSON.stringify(user));
      } else {
        setError('User info is not available');
      }
    } catch (error) {
      console.error('Google Sign-In error:', error);
      setError('Something went wrong with Google Sign-In');
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignOut = async () => {
    try {
      await GoogleSignin.signOut();
      setUser(null);
      await AsyncStorage.removeItem('user'); // Remove user data from AsyncStorage
    } catch (error) {
      console.error('Sign out error:', error);
      setError('Error during sign-out');
    }
  };

  // Custom Login/Signup functions
  const handleShowLoginScreen = () => {
    LoginModule.showLoginScreen();
  };

  const handleShowSignupScreen = () => {
    LoginModule.showSignupScreen();
  };

  return (
    <SafeAreaView style={styles.container}>
      {user ? (
        <View style={styles.profileContainer}>
          <Image source={{ uri: user.photo }} style={styles.profileImage} />
          <Text style={styles.buttonText}>{user.name}</Text>
          <Text style={styles.buttonText}>{user.email}</Text>

          <TouchableOpacity style={styles.button} onPress={handleGoogleSignOut}>
            <Text style={styles.buttonText}>Sign Out</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View style={styles.actionContainer}>
          <GoogleSigninButton
            style={styles.signInButton}
            size={GoogleSigninButton.Size.Wide}
            color={GoogleSigninButton.Color.Dark}
            onPress={handleGoogleLogin}
          />
          <TouchableOpacity style={[styles.button, styles.signupButton]} onPress={handleShowSignupScreen}>
            <Icon name="person-add" size={20} color="#fff" />
            <Text style={styles.buttonText}>Signup</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.button, styles.loginButton]} onPress={handleShowLoginScreen}>
            <Icon name="login" size={20} color="#fff" />
            <Text style={styles.buttonText}>Login</Text>
          </TouchableOpacity>
        </View>
      )}
      {error && <Text style={styles.errorText}>{error}</Text>}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f4f4f9',
    alignItems: 'center',
    padding: 16,
  },
  profileContainer: { alignItems: 'center', marginVertical: 24 },
  profileImage: { width: 120, height: 120, borderRadius: 60, marginBottom: 16 },
  buttonText: { marginLeft: 12, color: 'white', fontSize: 16, fontWeight: '600' },
  signInButton: {
    width: 312,
    height: 48,
    marginVertical: 8,
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'skyblue',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginVertical: 8,
  },
  signupButton: {
    backgroundColor: 'green',
  },
  loginButton: {
    backgroundColor: 'blue',
  },
  actionContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 40,
  },
  errorText: {
    color: 'red',
    fontSize: 16,
    marginTop: 16,
  },
});

export default ProfileScreen;
